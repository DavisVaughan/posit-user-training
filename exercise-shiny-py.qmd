# Exercise: Shiny for Python

![Shiny + FastAPI workflow](images/shiny-fastapi.png){#fig-shiny-fastapi fig-align="center" width="444"}

In this exercise, you will get practice creating a Shiny or Python application in Posit Workbench (VS Code) that makes predictions of new cases of COVID given a specific day of the year. This shiny application will be fairly "lightweight" in that it's primary role is to query the FastAPI on Posit Connect that serving our COVID model we created earlier in @sec-exercise-modelling. The user interface will only contain two things: a date selection box, and a text box with the predicted number of COVID cases:

![COVID Prediction App - Shiny for Python](images/shiny-ui-py.png){#fig-shiny-ui-py fig-align="center"}

## Step 1 - Set the Stage

Before we define our Shiny app user interface and server function, we first need to import the necessary packages and define some variables.

### Import Necessary Packages

``` python
from shiny import App, render, ui
import os
import vetiver
import pandas as pd
```

### Set Variables

The primary variable we need to set is the vetiver endpoint. You'll need to supply the API URL which can be found on Posit Connect. The other variable is the Posit Connect API key, which is only needed if your API requires authenticated access.

``` python
# Define endpoint for API and key
endpoint = vetiver.vetiver_endpoint("https://connectexample.posit.co/cnct/content/{APP_ID}/predict")

api_key = os.getenv("CONNECT_API_KEY") 
```

## Step 2 - Create User Interface

As shown in @fig-shiny-ui-py, our application only has an *input date*, and *output text*.

``` python
# User Interface
app_ui = ui.page_fluid(
    ui.input_date("day", "Select Date:", value="2021-01-01"),
    ui.output_text_verbatim("txt")
)
```

## Step 3 - Create Server Function

The goal of the server function is to query the FastAPI and use the API response to create the text output. After the server function, be sure to call the `App` function to bring together our UI and server function into a single app object!

``` python
# Server Function
def server(input, output, session):
    @render.text
    def txt():
       
        # Parameters to be included in the query string
        #  Convert date to number of year
        params = pd.DataFrame({
            'DayOfYear': [input.day().strftime("%j")]
        })

        # If needed, add authorization
        h = {"Authorization": f"Key {api_key}"}

        # Make a prediction
        response = vetiver.predict(endpoint=endpoint, data=params, headers=h).at[0, "predict"].round()

        # Return message
        return f"Predicted number of COVID cases: {response}"
      
# Create Shiny App
app = App(app_ui, server)
```

## Step 4 - Run the Application on Posit Workbench

Access the terminal within VS Code (click the three line icon in the top left corner followed by `Terminal` â€“\> `New Terminal`). The workshop environment is already configured with the `shiny` CLI tool which we can use to run the shiny application.

To run the shiny application, make sure you've saved your application as `app.py` and you know where it's located in your file system, then type the following command into the terminal:

``` bash
shiny run /path/to/app.py
```

You'll see a link appear in the terminal that you can click, or you can use the Posit Workbench VS Code extension (red arrow in @fig-vscode-pwb-extension) to view actively running "proxied servers." In the below example, you can see two servers running. The bottom server is actively running our shiny app!

![Posit Workbench VS Code Extension](images/vscode-pwb-extension.png){#fig-vscode-pwb-extension fig-align="center" width="398"}

## Step 5 - Publish Shiny Application to Posit Connect

In the last step, we'll show how to use the `rsconnect-python` CLI tool to publish our shiny for python application to Posit Connect.

The only prerequisite needed, is to define the instance of Posit Connect you would like to publish to. In the workshop environment, this has already been configured, and you can run `rsconnect list` in the terminal to view the details. See Posit's documentation for [how to add a new Posit Connect](https://docs.posit.co/rsconnect-python/#remembering-server-information) instance if needed.

To publish the shiny application, run the following command in the terminal:

``` bash
rsconnect deploy shiny path/to/app.py/
```

The only argument you need to supply is the directory that contains the shiny for python application (called `app.py`). Once the deployment process is complete, you can click the links at the bottom of the terminal (see example terminal output below) to view the application now hosted on Posit Connect!

``` bash
Deployment completed successfully.
         Dashboard content URL: https://connectexample.posit.co/cnct/connect/#/{APP_ID}
         Direct content URL: https://connectexample.posit.co/cnct/content/{APP_ID}/
```
