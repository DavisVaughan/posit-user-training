# Data

> ["Data is the new oil!"]{style="font-size: 40px;"}
>
> \- British mathematician Clive Humbly, 2006

Data is a precious commodity, playing a key role in informing decisions and driving insights. Similar to oil, if data is not properly mined, it's essentially useless. In order for the value of data to be realized, data science teams need a way to store and access data freely and readily.

## Data Import Options

Data lives in a variety of locations in a variety of formats, and as such, there are many options for bringing your data into your development environment. Below are few common options for accessing your data:

![Data import options](images/data-import-options.png){#fig-data-import-options fig-align="center"}

Of the four options listed in @fig-data-import-options, Databases are the most complex. In the next section, we will give you a primer on working with databases.

## A Primer on Databases

Databases are managed by **D**ata**B**ase **M**anagement **S**ystems (DBMSs). There exists a growing list of DBMSs for databases hosted on-prem (client server), in the Cloud, or in-process. Below are a few common DBMSs:

![Database Management Systems](images/dbms.png){#fig-dbms fig-align="center"}

In R, there exists an *interface* layer between the R programming language and the DBMS. This is know as the **D**ata**B**ase **I**nterface (DBI). To make a connection to a DBMS from R, you use the `DBI::dbConnect()` function in combination with an R package tailored for the DBMS you are connecting to. For example, here is some R code to connect to a PostgreSQL database:

``` r
con <- DBI::dbConnect(
  RPostgres::Postgres(), 
  hostname = "databases.mycompany.com", 
  port = 1234
)
```

In Python, the database interface layer is an API known as the Python **D**ata**B**ase **API** (DB-API). Most packages and modules in Python used to access DBMSs are often designed to be DB-API compliant including `sqlite3`, `psycopg2`, and `mysql-connector-python`. For example, here is some Python code to connect to a SQLite database:

``` python
con = sqlite3.connect('example.db')
```

With so many DBMS-specific connectors, it can be overwhelming to remember which package/function to use. As such, most DBMSs will also provide a connector known as an **O**pen **D**ata**B**ase **C**onnectivity (ODBC) driver. ODBC is a *universal* DBMS interface, which means the same ODBC functions will work with any database. For example, here is how to make an ODBC connection to a PostgreSQL database in R and Python:

``` r
# In R
library(DBI)
library(odbc)

con <- DBI::dbConnect(odbc::odbc(),
  driver = "PostgreSQL Driver",
  database = "test_db",
  UID    = Sys.getenv("DB_USER"),
  PWD    = Sys.getenv("DB_PASSWORD"),
  host = "localhost",
  port = 5432)
```

``` python
# In Python
import pyodbc

con = pyodbc.connect(
  driver = 'PostgreSQL',
  database = 'test_db',
  server = 'localhost',
  port = 5432, 
  uid = os.getenv('DB_USER'),
  pwd = os.getenv('DB_PASSWORD')
)
```

## Posit's Professional ODBC Drivers

Not all DBMSs will provide an ODBC Driver. This can be a major blocker for users attempting to import data into their development environment. To overcome this limitation, Posit has created custom ODBC drivers that work with many of the popular DBMSs used today, including:

![Posit's Professional ODBC Drivers](images/posit-odbc-drivers.png){#fig-posit-odbc-drivers fig-align="center"}

Make sure to speak with your Posit Team system administrator if you currently use any of the above databases.
