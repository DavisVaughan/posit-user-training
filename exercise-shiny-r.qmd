# Exercise: Shiny for R

![Git Backed Deployment Workflow](images/git-backed-workflow.jpg){#fig-git-backed-workflow fig-align="center" width="506"}

In the previous exercise (@sec-exercise-shiny-py), we created a shiny application and **manually** deployed it to Posit Connect. What happens if you make a change to your application? Well you'll have to manually deploy again...and again...and again.

Automating manual processes can save your team time and headaches. In this exercise, you will get practice automating the deployment process by using git-backed deployment!

## Introduction to Git-Backed Deployment

Every data science workflow should use version control! The most popular version control system is *git*, which allows you to track the evolution of your workflow's source code. You can host the tracked files in what's known as a *repository.*

If the content your working on (or maybe collaboratively working on) lives withing in git repository, then you can publish it directly to Posit Connect! The only requirement is you'll need to supply a companion `manifest.json` file for your content. This file contains information about the development environment so that Posit Connect knows which packages, package version, and R/Python versions are needed to run the content on Posit Connect. To create a manifest file for your R/Python content, see the documentation [here](https://docs.posit.co/connect/user/git-backed/) and example code snippets below:

::: {.panel-tabset group="language"}
## Python

``` python
rsconnect write-manifest
```

## R

``` r
library(rsconnect)

writeManifest()
```
:::

Once a piece of content is deployed to Posit Connect via git-backed deployment, anytime there is an update to the content within the git repository, Posit Connect will detect that change and **automatically redeploy the content!**

For this exercise, we've created a [GitHub repository](https://github.com/ryjohnson09/covid-analysis/tree/main) that contains a Shiny application (built using R) which we'll deploy to Posit Connect.

## Step 1 - Initiate Git-Backed Deployment on Posit Connect

Within the GitHub repository is a directory called `shiny-app-r`. Within that directory will be the two files required for git-backed deployment: the application itself (`app.py`) and the required `manifest.json` file.

Within Posit Connect, navigate to the **Content** page and click the **Publish** button at the top. In the dropdown menu, select **Import from Git**.

![Publish Drop Down Options](images/import-from-git.png){#fig-publish-dropdown fig-align="center" width="321"}

## Step 2 - Add Repository Details

In the next popup window, you'll need to supply the URL for the git repository.

![Git Repository URL](images/repo-url.png){#fig-repo-url fig-align="center" width="432"}

After supplying the URL, click **Next** where you'll be asked to select a branch. This repository only contains a single branch called `main`. Ensure `main` is selected and click **Next**.

::: callout-tip
You can deploy the same piece of content from a single git repository! For example, maybe you have a developmental version on a `dev` branch, and a production version on the `main` branch.
:::

## Step 3 - Deploy Content

At this point, Posit Connect will look for "deployable directories." In other words, it's looking for directories in the repository that contain a `manifest.json` file. There should only be one deployable directory (`shiny-app-r`). Ensure it's selected, give your application a name, then click **Deploy Content**!

![Deploy Content from Git Repository](images/deploy-content.png){#fig-deploy-content fig-align="center" width="452"}

Connect will then read the `manifest.json` file and install any environment dependencies needed to ensure the application runs properly. After the deployment process is complete, click **Open Content** to view the application on Posit Connect!

![Covid Dashboard](images/covid-dashbaord.png){#fig-covid-dashboard fig-align="center"}

This shiny dashboard tells us the same information as our previous shiny for Python application: how many new COVID cases are predicted for a given day of the year. As you can see, this application has some additional details and features that greatly improve the user experience including the total number of COVID cases for the given state/province, and the single day max number of new COVID cases.

By default, Posit Connect will scan the linked git repository for any changes every 15 minutes. If any changes were detected (e.g., a new commit to the `main` branch), Posit Connect will automatically redeploy the application! You can also manually check for repository updates by clicking the **Info** tab in the top right corner and selection **Update Now** from the side bar:

![Manually Check Git Repository for Changes](images/update-content.png){#fig-update-content fig-align="center"}
